library(dplyr)
set.seed(999)
data <- read.csv("/Users/kaimen/downloads/ScanRecords.csv")
type1_data <- data[data$PatientType == "Type 1", ]

#estimate parameters of normd for durations
estimate_normal_parameters <- function(type1_data) {
  mean_duration <- mean(type1_data$Duration)
  sd_duration <- sd(type1_data$Duration)
  return(c(mean_duration, sd_duration))
}
#estimate parameters of poissd for numb patients/day
estimate_poisson_parameter <- function(type1_data) {
  lambda <- mean(diff(type1_data$Time))
  return(lambda)
}

#parametric bootstrapping func
parametric_bootstrap <- function(type1_data, iterations) {
  bootstrap_results <- matrix(NA, nrow = iterations, ncol = 3)
  
  for (i in 1:iterations) {
    #estimate statistics under bootstrap
    params_duration <- estimate_normal_parameters(type1_data)
    params_poisson <- estimate_poisson_parameter(type1_data)
    
    #generate new samples under bootstrap
    simulated_durations <- rnorm(nrow(type1_data), mean = params_duration[1], sd = params_duration[2])
    simulated_interarrival_times <- rexp(nrow(type1_data), rate = 1/params_poisson)
    
    #compute arrival times
    simulated_arrival_times <- cumsum(simulated_interarrival_times)
    
    #savings in datamatrix
    bootstrap_results[i, ] <- c(mean(simulated_durations), sd(simulated_durations), mean(simulated_interarrival_times))
  }
  return(bootstrap_results)
}

iterations <- 1000
bootstrap_results <- parametric_bootstrap(type1_data, iterations)
cat("mean duration: ", mean(bootstrap_results[, 1]), "\n")
cat("sd duration: ", mean(bootstrap_results[, 2]), "\n")
cat("lambda: ", mean(bootstrap_results[, 3]), "\n")
mean_ci <- quantile(bootstrap_results[, 1], c(0.05, 0.95))
sd_ci <- quantile(bootstrap_results[, 2], c(0.05, 0.95))
cat("95% ci mean duration: ", mean_ci, "\n")
cat("95% ci sd duration: ", sd_ci, "\n")
estimate_normal_parameters(type1_data)
estimate_poisson_parameter(type1_data)
